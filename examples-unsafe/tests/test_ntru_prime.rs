use hacspec_dev::prelude::*;
use hacspec_lib::prelude::*;

use unsafe_hacspec_examples::ntru_prime::*;

fn gen_coefficients(num: usize) -> Seq<i128> {
    let mut out = Seq::<i128>::new(num);
    for i in 0..out.len() {
        out[i] = random_public_integer_range(-1, 2);
    }
    out
}

fn gen_positions(num: usize, max: usize) -> Seq<i128> {
    let mut out = Seq::<i128>::new(num);
    let mut i = 0;
    let max = max as i128; // The `as` is fine here.
    'outer: loop {
        let r = random_public_integer_range(0, max);
        for j in 0..i {
            if out[j] == r {
                continue 'outer;
            }
        }
        out[i] = r;
        i += 1;
        if i >= num {
            break;
        }
    }
    out
}

#[test]
fn test_gen_pos() {
    let pos = gen_positions(288, 288);
    let mut vec = vec![0; 288];
    for i in 0..288 {
        vec[i] = pos[i];
    }
    vec.sort();
    println!("{:?}", vec);
}

#[test]
fn test_round() {
    let test: Seq<i128> = Seq::from_native_slice(&[
        2564, 1471, 840, 4242, 2672, 3450, 3239, 2323, 826, 532, 1583, 4387, 3452, 999, 957, 4400,
        757, 3794, 2460, 2141, 4269, 2477, 3196, 2834, 840, 3303, 3118, 3520, 1027, 1381, 641,
        1251, 4560, 2679, 3302, 709, 3490, 1070, 1147, 2658, 251, 350, 12, 986, 2708, 4295, 267,
        3821, 3719, 718, 2, 3697, 1191, 1610, 216, 1239, 878, 1605, 4488, 597, 1448, 4546, 2898,
        4175, 34, 390, 4204, 2435, 922, 4546, 4538, 1838, 2192, 2868, 2994, 2592, 1672, 3933, 4194,
        3441, 1038, 4521, 3758, 4114, 4556, 2046, 1550, 3289, 1808, 4589, 1592, 1103, 1506, 3973,
        1764, 1198, 2802, 2633, 3829, 3256, 347, 3418, 2255, 3799, 1524, 680, 402, 2298, 335, 1328,
        2954, 2447, 4056, 3293, 3896, 2200, 2673, 2317, 2005, 2159, 2053, 3829, 1390, 467, 2283,
        2054, 2264, 4563, 1925, 4433, 1156, 333, 315, 1102, 3374, 4335, 72, 411, 2081, 2726, 1642,
        3537, 3141, 321, 3, 2371, 3358, 891, 4205, 283, 4424, 145, 215, 746, 1624, 1442, 522, 3341,
        524, 2734, 2586, 1414, 1787, 3805, 2108, 3383, 2481, 1516, 2830, 3955, 1473, 863, 892,
        4099, 2126, 2557, 1625, 116, 4407, 2496, 1808, 1443, 2959, 3461, 3581, 3666, 3916, 299,
        1596, 4430, 2686, 720, 4296, 2557, 3060, 2902, 890, 2456, 1958, 4354, 3425, 840, 3237,
        3324, 837, 1493, 1502, 3847, 2207, 811, 4132, 102, 2265, 798, 4314, 2743, 3434, 3453, 2510,
        683, 596, 3735, 1144, 1301, 3690, 1792, 1901, 533, 84, 584, 3559, 1340, 915, 790, 634,
        1954, 3919, 1340, 1890, 231, 96, 2561, 1423, 4313, 1328, 86, 221, 1276, 2519, 2177, 4520,
        1576, 204, 4343, 1070, 4380, 4446, 2943, 1460, 1384, 1945, 2032, 438, 2989, 695, 1239,
        2081, 784, 3839, 1561, 4041, 3224, 3654, 2661, 140, 1472, 595, 564, 259, 3455, 3483, 24,
        724, 3361, 2506, 4247, 683, 2551, 2133, 3659, 1165, 2090, 3718, 3760, 2713, 4434, 3253,
        4022, 1231, 3150, 4288, 3667, 1384, 1629, 1886, 1173, 2787, 342, 3746, 4047, 4018, 2343,
        3299, 1841, 3583, 2124, 855, 640, 3534, 691, 3670, 2867, 502, 1329, 3545, 1908, 3815, 1640,
        3712, 3069, 4016, 2045, 2760, 1868, 4555, 1260, 3497, 3451, 2832, 3942, 1178, 158, 2755,
        2288, 134, 2597, 1635, 2494, 325, 3893, 1338, 452, 1651, 2148, 1148, 4021, 2934, 4132,
        2351, 3510, 3285, 385, 2540, 3561, 3896, 609, 1578, 1189, 2752, 4063, 358, 968, 3358, 1839,
        2547, 1947, 3952, 3461, 3608, 3702, 4348, 1070, 1645, 3345, 3810, 1768, 4585, 3886, 214,
        2225, 2034, 2448, 3745, 2908, 391, 2264, 821, 1762, 3470, 2443, 2166, 548, 1937, 1869, 473,
        2969, 606, 2249, 1337, 2305, 373, 979, 3277, 29, 4485, 3517, 4011, 3360, 4228, 646, 1355,
        3530, 1473, 1745, 3549, 3018, 3220, 1941, 1299, 2231, 116, 4489, 418, 1551, 3882, 1912,
        1120, 3450, 3283, 114, 2859, 4376, 2910, 2816, 534, 3307, 618, 2117, 4560, 4167, 1200,
        3846, 3823, 2762, 2678, 1325, 3197, 2950, 3157, 671, 2059, 2542, 2605, 34, 2012, 4006,
        1163, 1196, 3963, 225, 1757, 2779, 4200, 319, 258, 1588, 2784, 422, 1391, 697, 3434, 2694,
        3934, 2226, 3895, 1143, 1505, 615, 3621, 1282, 4557, 1237, 960, 3379, 4540, 1560, 138, 768,
        3023, 2542, 2481, 1559, 3570, 472, 2187, 2375, 3334, 3411, 2753, 2623, 3067, 2163, 346,
        3410, 978, 1442, 2760, 2853, 840, 4417, 1348, 3236, 3871, 2802, 4074, 2588, 857, 4295, 695,
        841, 2887, 1451, 3152, 166, 3026, 3158, 4215, 3527, 3071, 1992, 3225, 1966, 1569, 3516,
        3904, 894, 3714, 4135, 4388, 3127, 4005, 668, 2927, 487, 1005, 3333, 1177, 4180, 1173,
        2294, 1444, 1346, 2852, 2935, 2022, 509, 3464, 3310, 4408, 2230, 2908, 1938, 989, 4296,
        3512, 1485, 2842, 3085, 4305, 3411, 1042, 457, 2588, 2183, 4127, 2989, 486, 3057, 1420,
        1801, 71, 2955, 1134, 2020, 3895, 1000, 3648, 1374, 2898, 3808, 717, 2306, 2678, 4402,
        4319, 2035, 2574, 2765, 2465, 2373, 1446, 998, 83, 3748, 4526, 2760, 4242, 1569, 3237,
        2465, 4073, 4283, 3035, 2297, 1300, 1827, 4244, 3530, 1802, 3521, 3672, 3959, 3318, 2440,
        4138, 2789, 4056, 1762, 1100, 1223, 3426, 3247, 1547, 1373, 1554, 3969, 4039, 4497, 1328,
        3949, 1017, 2435, 998, 3470, 4071, 2956, 4477, 1669, 811, 3474, 3521, 4021, 601, 1051,
        3299, 833, 2197, 4150, 454, 2475, 2781, 39, 2108, 4283, 4403, 1793, 3749, 3176, 27, 17,
        3936, 1641, 3917, 1802, 2391, 2041, 1889, 3851, 2573, 2053, 1504, 3365, 640, 292, 3159,
        372, 1816, 424, 3018, 1075, 4123, 1132, 2611, 703, 149, 748, 965, 2079, 894, 1437, 451,
        4222, 1656, 1724, 2129, 939, 2120, 1840, 1355, 3908, 1838, 1528, 4198, 3443, 4077, 4516,
        1779, 3975, 4098, 1223, 1330, 452, 893, 2434, 2024, 1534, 1552, 2455, 374, 2549, 848, 324,
        871, 3171, 3995, 927, 3420, 203, 941, 4205, 4532, 3366, 3055, 2332, 3324, 4340, 2062, 1641,
        2582, 3860, 3697, 0,
    ]);
    let target: Seq<i128> = Seq::from_native_slice(&[
        -2028, 1470, 840, -348, -1920, -1140, -1353, -2268, 825, 531, 1584, -204, -1140, 999, 957,
        -192, 756, -798, -2130, 2142, -321, -2115, -1395, -1758, 840, -1287, -1473, -1071, 1026,
        1380, 642, 1251, -30, -1911, -1290, 708, -1101, 1071, 1146, -1932, 252, 351, 12, 987,
        -1884, -297, 267, -771, -873, 717, 3, -894, 1191, 1611, 216, 1239, 879, 1605, -102, 597,
        1449, -45, -1692, -417, 33, 390, -387, -2157, 921, -45, -54, 1839, 2193, -1722, -1596,
        -1998, 1671, -657, -396, -1149, 1038, -69, -834, -477, -36, 2046, 1551, -1302, 1809, -3,
        1593, 1104, 1506, -618, 1764, 1197, -1788, -1959, -762, -1335, 348, -1173, 2256, -792,
        1524, 681, 402, -2292, 336, 1329, -1638, -2145, -534, -1299, -696, 2199, -1917, -2274,
        2004, 2160, 2052, -762, 1389, 468, 2283, 2055, 2265, -27, 1926, -159, 1155, 333, 315, 1101,
        -1218, -255, 72, 411, 2082, -1866, 1641, -1053, -1449, 321, 3, -2220, -1233, 891, -387,
        282, -168, 144, 216, 747, 1623, 1443, 522, -1251, 525, -1857, -2004, 1413, 1788, -786,
        2109, -1209, -2109, 1515, -1761, -636, 1473, 864, 891, -492, 2127, -2034, 1626, 117, -183,
        -2094, 1809, 1443, -1632, -1131, -1011, -924, -675, 300, 1596, -162, -1905, 720, -294,
        -2034, -1530, -1689, 891, -2136, 1959, -237, -1167, 840, -1353, -1266, 837, 1494, 1503,
        -744, 2208, 810, -459, 102, 2265, 798, -276, -1848, -1158, -1137, -2082, 684, 597, -855,
        1143, 1302, -900, 1791, 1902, 534, 84, 585, -1032, 1341, 915, 789, 633, 1953, -672, 1341,
        1890, 231, 96, -2031, 1422, -279, 1329, 87, 222, 1275, -2073, 2178, -72, 1575, 204, -249,
        1071, -210, -144, -1647, 1461, 1383, 1944, 2031, 438, -1602, 696, 1239, 2082, 783, -753,
        1560, -549, -1368, -936, -1929, 141, 1473, 594, 564, 258, -1137, -1107, 24, 723, -1230,
        -2085, -345, 684, -2040, 2133, -933, 1164, 2091, -873, -831, -1878, -156, -1338, -570,
        1230, -1440, -303, -924, 1383, 1629, 1887, 1173, -1803, 342, -846, -543, -573, -2247,
        -1293, 1842, -1008, 2124, 855, 639, -1056, 690, -921, -1725, 501, 1329, -1047, 1908, -777,
        1641, -879, -1521, -576, 2046, -1830, 1869, -36, 1260, -1095, -1140, -1758, -648, 1179,
        159, -1836, 2289, 135, -1995, 1635, -2097, 324, -699, 1338, 453, 1650, 2148, 1149, -570,
        -1656, -459, -2241, -1080, -1305, 384, -2052, -1029, -696, 609, 1578, 1188, -1839, -528,
        357, 969, -1233, 1839, -2043, 1947, -639, -1131, -984, -888, -243, 1071, 1644, -1245, -780,
        1767, -6, -705, 213, 2226, 2034, -2142, -846, -1683, 390, 2265, 822, 1761, -1122, -2148,
        2166, 549, 1938, 1869, 474, -1623, 606, 2250, 1338, -2286, 372, 978, -1314, 30, -105,
        -1074, -579, -1230, -363, 645, 1356, -1062, 1473, 1746, -1041, -1572, -1371, 1941, 1299,
        2232, 117, -102, 417, 1551, -708, 1911, 1119, -1140, -1308, 114, -1731, -216, -1680, -1776,
        534, -1284, 618, 2118, -30, -423, 1200, -744, -768, -1830, -1914, 1326, -1395, -1641,
        -1434, 672, 2058, -2049, -1986, 33, 2013, -585, 1164, 1197, -627, 225, 1758, -1812, -390,
        318, 258, 1587, -1806, 423, 1392, 696, -1158, -1896, -657, 2226, -696, 1143, 1506, 615,
        -969, 1281, -33, 1236, 960, -1212, -51, 1560, 138, 768, -1569, -2049, -2109, 1560, -1020,
        471, 2187, -2217, -1257, -1179, -1839, -1968, -1524, 2163, 345, -1182, 978, 1443, -1830,
        -1737, 840, -174, 1347, -1356, -720, -1788, -516, -2004, 858, -297, 696, 840, -1704, 1452,
        -1440, 165, -1566, -1434, -375, -1065, -1521, 1992, -1365, 1965, 1569, -1074, -687, 894,
        -876, -456, -204, -1464, -585, 669, -1665, 486, 1005, -1257, 1176, -411, 1173, 2295, 1443,
        1347, -1740, -1656, 2022, 510, -1128, -1281, -183, 2229, -1683, 1938, 990, -294, -1080,
        1485, -1749, -1506, -285, -1179, 1041, 456, -2004, 2184, -465, -1602, 486, -1533, 1419,
        1800, 72, -1635, 1134, 2019, -696, 999, -942, 1374, -1692, -783, 717, -2286, -1914, -189,
        -273, 2034, -2016, -1827, -2127, -2217, 1446, 999, 84, -843, -66, -1830, -348, 1569, -1353,
        -2127, -519, -309, -1557, -2295, 1299, 1827, -348, -1062, 1803, -1071, -918, -633, -1272,
        -2151, -453, -1803, -534, 1761, 1101, 1224, -1164, -1344, 1548, 1374, 1554, -621, -552,
        -93, 1329, -642, 1017, -2157, 999, -1122, -519, -1635, -114, 1668, 810, -1116, -1071, -570,
        600, 1050, -1293, 834, 2196, -441, 453, -2115, -1809, 39, 2109, -309, -189, 1794, -843,
        -1416, 27, 18, -654, 1641, -675, 1803, -2199, 2040, 1890, -741, -2019, 2052, 1503, -1227,
        639, 291, -1431, 372, 1815, 423, -1572, 1074, -468, 1131, -1980, 702, 150, 747, 966, 2079,
        894, 1437, 450, -369, 1656, 1725, 2130, 939, 2121, 1839, 1356, -684, 1839, 1527, -393,
        -1149, -513, -75, 1779, -615, -492, 1224, 1329, 453, 894, -2157, 2025, 1533, 1551, -2136,
        375, -2043, 849, 324, 870, -1419, -597, 927, -1170, 204, 942, -387, -60, -1224, -1536,
        -2259, -1266, -252, 2061, 1641, -2010, -732, -894, 0,
    ]);
    assert_eq!(degree_poly(&target), degree_poly(&test));
    assert_eq!(weight(&target), weight(&test));
}
#[test]
fn test_encryption_decryption() {
    let n_v = get_parameters(Version::NtruPrime761);
    let g = Poly {
        positions: gen_positions(n_v.w, n_v.p),
        coefficients: gen_coefficients(n_v.w),
    };
    let f = Poly {
        positions: gen_positions(n_v.w, n_v.p),
        coefficients: gen_coefficients(n_v.w),
    };
    let (pk, sk) = key_gen(&g, &f, &n_v).unwrap();

    // message
    let msg = Poly {
        positions: gen_positions(n_v.w, n_v.p),
        coefficients: gen_coefficients(n_v.w),
    };
    let m = build_poly(&msg, n_v.p);

    // encryption
    let c = encrypt(&m, &pk, &n_v);
    let result = decrypt(&c, &sk, &n_v).unwrap();
    for i in 0..result.len() {
        if result[i] != m[i] {
            panic!("NTRU prime failed!");
        }
    }
}
/// the following KAT are generated with https://ntruprime.cr.yp.to/ntruprime.sage.
/// Guideline to generate the same KAT with the program above:
/// For NTRU prime Streamlined p = 653:
///     1. change 'selection = 0' to 'selection = 4'
///     2. print all relevant values (pk,sk,m and c)
///     3. reduce for-loop("for testkey in range(10)"") from 10 to 1
///     4. use the script to convert each print output to Seq<i128>
/// For NTRU prime Streamlined p = 761:
///     1. change 'selection = 0' to 'selection = 2'
///     2. print all relevant values (pk,sk,m and c)
///     3. reduce for-loop("for testkey in range(10)"") from 10 to 1
///     4. use the script to convert each print output to Seq<i128>
/// For NTRU prime Streamlined p = 857:
///     1. change 'selection = 0' to 'selection = 6'
///     2. print all relevant values (pk,sk,m and c)
///     3. reduce for-loop("for testkey in range(10)"") from 10 to 1
///     4. use the script to convert each print output to Seq<i128>

#[test]
fn kat_ntru_prime_653() {
    let m: Seq<i128> = Seq::from_native_slice(&[
        -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, 0, -1, 1, 0, -1, 0, 0, 0, -1, -1, 0,
        -1, 0, 0, 1, 0, 0, 0, -1, -1, 0, 1, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1,
        0, -1, 1, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1,
        0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0,
        0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0,
        -1, 0, 0, 0, 1, -1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, -1, 1, 0, -1, 0, 0, 0, -1, 1,
        0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0,
        0, 0, 1, -1, 0, 1, -1, -1, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, 1, -1, 1, 0, 0, 0, -1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, -1,
        0, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0,
        0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0,
        -1, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0,
        0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, -1, -1, 0, 0, 0, 1,
        0, -1, 0, 1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, -1, 1, -1, 0, 0, -1, 0,
        -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0,
        0, -1, 0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 1, 0, 1, -1, -1, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1,
        0, 0, 0, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, 1, -1, -1, 0, 0, 0, -1, 0, 0,
        1, 1, -1, 0, 1, -1, -1, 0, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, 1, 1, 1, 1, 0,
        1, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, -1, 0, 0, 0, -1, 0, 1, -1, -1, 0, 0, 0, -1, 1, -1, 0,
        0, 0, 1, 0, -1, 0, 1, 1, 1, 0, 0, 1, -1, -1, 1, 0, -1, 0, -1, 1, -1, 0, 0, 1, 0, 0, 0, -1,
        0, 0, 1, 1, 1, -1, -1, 0, 0, -1, -1, 0, 0, -1, 1, 1, -1, 0, 0, 0, -1, 1, -1, -1, 0, -1, -1,
        -1, 0, 1, -1, 1, 0, 0, 1, 1, -1, 0, 0, -1, 1, 0, -1, 0, 0, -1, 0, 1, 0, 1, 0, 0, 0, 1, 0,
        1, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, -1, -1, 0, 1, -1, 0, 0, -1, -1, -1, 0,
        0, 1, 1, 0, 1, 0, 1, 0, 0, 0, -1, -1, 0, -1, -1, 1, 0, -1, -1, 1, -1, -1, 0, 0, 0, 0,
    ]);
    let pk: Seq<i128> = Seq::from_native_slice(&[
        380, 284, 2724, 4570, 1799, 2022, 4248, 4208, 476, 790, 1171, 2999, 4381, 3380, 1, 1013,
        3606, 4296, 3732, 2077, 4415, 3558, 1931, 2983, 1589, 3234, 756, 3105, 3554, 133, 1210,
        4599, 4557, 2373, 413, 391, 1674, 2254, 2714, 2343, 825, 710, 836, 2436, 4039, 4209, 4614,
        3850, 734, 2593, 242, 1887, 525, 1147, 2993, 2591, 4613, 4130, 2417, 3830, 625, 1662, 4050,
        3114, 465, 420, 105, 2627, 3094, 2060, 1831, 2933, 946, 1761, 2854, 1365, 2621, 3473, 566,
        3361, 39, 1863, 2140, 4210, 2446, 2968, 1998, 4364, 3280, 1889, 3394, 2917, 2865, 2347,
        2971, 2325, 1205, 1893, 2646, 3010, 3399, 2258, 137, 4519, 2754, 1965, 2530, 1701, 2199,
        1383, 1232, 650, 4374, 239, 2267, 3010, 4565, 3537, 1076, 230, 4449, 844, 1120, 2322, 743,
        3998, 2758, 1627, 2641, 3381, 2388, 1616, 1510, 4442, 3665, 1226, 1682, 1906, 1278, 234,
        1953, 2192, 3396, 503, 3330, 1829, 1970, 2392, 3841, 3202, 529, 1332, 1701, 400, 2915, 839,
        4617, 1476, 1188, 3598, 1484, 2589, 1994, 2224, 3665, 3336, 1031, 955, 3301, 3434, 2024,
        1174, 666, 3650, 270, 1495, 3982, 840, 4312, 2455, 284, 4481, 2283, 4009, 440, 2994, 3855,
        2676, 3626, 666, 3291, 3859, 2207, 1404, 4450, 3405, 440, 2896, 3414, 252, 3966, 2333,
        3430, 3760, 1556, 1304, 2606, 405, 1052, 3918, 3718, 419, 4379, 3367, 3245, 2471, 3595,
        2836, 78, 3935, 2072, 2690, 1156, 1447, 4269, 2950, 3280, 4096, 4231, 3705, 1582, 1571,
        1307, 1931, 3385, 2406, 914, 2686, 499, 2590, 1675, 1466, 1811, 3982, 2787, 2852, 1181,
        2668, 381, 3492, 2444, 2343, 237, 1724, 1680, 1884, 1968, 1163, 3804, 4612, 3694, 247,
        2798, 497, 3458, 3127, 1471, 2641, 1487, 662, 3299, 1657, 3075, 2671, 3407, 1524, 1642,
        1231, 2708, 2208, 3199, 3788, 2247, 4568, 2489, 842, 3363, 1232, 1953, 1270, 3637, 3298,
        1544, 1952, 988, 1055, 3038, 3892, 1516, 3470, 3530, 2226, 4009, 4029, 3703, 1986, 2340,
        4469, 3408, 975, 3330, 719, 1376, 3685, 1030, 3155, 2364, 2794, 1455, 3648, 3428, 2627,
        4472, 1950, 1291, 670, 1377, 4516, 494, 678, 1157, 4408, 2108, 1202, 1234, 2021, 3352,
        4365, 88, 3653, 4220, 1033, 818, 1917, 1602, 1159, 4601, 1567, 1614, 816, 4085, 675, 3598,
        3170, 290, 787, 1694, 2946, 2953, 2519, 688, 3688, 1829, 3014, 709, 1528, 4092, 2168, 1303,
        556, 222, 1079, 3380, 185, 1282, 1794, 1581, 2566, 129, 3936, 3891, 292, 3150, 429, 4093,
        1582, 3414, 915, 55, 126, 3879, 240, 2443, 284, 3877, 4507, 1418, 1497, 3820, 113, 2453,
        4082, 2752, 4465, 3008, 1190, 31, 1959, 3574, 2502, 1402, 1994, 3164, 1842, 2919, 4430,
        458, 2297, 290, 390, 2753, 4163, 2217, 2334, 867, 463, 4309, 2186, 159, 2383, 2243, 1585,
        4551, 4126, 2707, 3376, 1436, 2207, 1900, 1913, 3419, 883, 1167, 1877, 4503, 1465, 2327,
        1516, 578, 1216, 274, 365, 2536, 928, 2977, 1649, 4455, 2309, 3812, 1442, 4386, 1937, 4307,
        2866, 1849, 4157, 3587, 1319, 2430, 4101, 797, 122, 2027, 3586, 4291, 2491, 2150, 933,
        3001, 2230, 186, 3894, 1308, 3574, 1688, 2290, 768, 2127, 3893, 4505, 960, 2466, 4209,
        4058, 3961, 1919, 494, 787, 4486, 1498, 143, 3316, 3790, 4319, 3069, 3199, 4146, 176, 1630,
        3328, 755, 644, 3927, 485, 394, 3021, 1622, 598, 390, 2875, 2177, 3021, 4441, 1398, 3039,
        2606, 3890, 2907, 456, 2283, 4161, 2651, 1732, 2719, 4552, 4182, 392, 1276, 501, 3212,
        2145, 1958, 3038, 3802, 2360, 2208, 1541, 2638, 2800, 3285, 3205, 804, 4326, 2448, 2134,
        3595, 1406, 3405, 3090, 2777, 3407, 180, 973, 3321, 4324, 4503, 1172, 1267, 2135, 2910,
        2156, 705, 3723, 855, 3168, 3836, 1164, 2240, 187, 2460, 301, 3553, 4183, 4014, 1246, 1546,
        3250, 1306, 4236, 172, 4163, 1123, 4547, 3705, 1581, 149, 4349, 1480, 4501, 820, 367, 1760,
        2078, 3619, 218, 2232, 2223, 2260, 1254, 2699, 3409, 254, 487, 2074, 2927, 3017, 4209,
        3944, 2167, 1905, 1180, 3793, 95, 792, 2453, 2418, 2662, 4292, 2056, 1313, 2978, 603, 979,
        3085, 2046, 1196, 1793, 2855, 4536, 493, 3911, 3531, 551, 3679, 3312, 2902, 4513, 1283,
        1555, 4527, 2331, 2761, 2088, 0,
    ]);
    let sk: (Seq<i128>, Seq<i128>) = (
        Seq::from_native_slice(&[
            0, -1, 1, -1, 0, 0, -1, 1, -1, 0, -1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, -1, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 1, 1, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1, -1,
            0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1,
            -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1,
            0, 0, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, 1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1,
            0, 1, 0, 0, 0, -1, -1, 0, 0, 1, 1, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, -1, 1, -1, -1, 1,
            0, 0, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, -1, -1, 0, -1, 1, 0, 0, -1, 0, 0, 1, -1, -1, 0,
            1, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, 0, -1, 0, -1, -1, -1, 0, 1, 0, 0, 0, 0, -1,
            0, 0, 0, 0, -1, 0, 0, -1, -1, -1, -1, 0, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0,
            -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1,
            0, -1, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1,
            0, -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0,
            0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, -1, 0, 0,
            -1, -1, 0, -1, 0, 0, 1, -1, -1, 1, 1, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, 1,
            -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, -1,
            -1, 0, -1, 0, -1, 0, 0, 0, 0, -1, -1, 1, 0, 1, 0, 0, -1, -1, -1, -1, 0, 1, 1, 0, 0, 0,
            -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1, 0, 0, 1,
            -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, -1, 1, 1, -1, 0, 0, -1, 0,
            -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, -1, -1, 0, -1, 0, 0, 0,
            0, 1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0, -1, 0, 0,
            1, 0, -1, 0, -1, 0, 0, 0, 1, -1, 1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0,
            -1, 0, -1, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 0, -1, 1,
            0, -1, 1, 0, 0, -1, -1, 0, -1, -1, 1, 0, -1, 1, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0,
            0, -1, 0,
        ]),
        Seq::from_native_slice(&[
            2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 0, 0, 1, 1, 1, 2, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1,
            0, 2, 2, 0, 2, 1, 1, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 2, 2, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0,
            2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 2, 2, 2, 0, 0, 2, 1, 1, 0, 1, 0, 2, 0, 2, 1, 0, 1, 1, 1,
            2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 2, 1, 1, 2, 2, 2, 2, 2, 0, 0,
            1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 2, 2, 2, 0, 1, 2, 2, 2,
            2, 2, 0, 0, 2, 0, 0, 1, 2, 0, 2, 2, 1, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 0, 2,
            0, 0, 2, 0, 1, 1, 2, 2, 1, 2, 1, 2, 2, 0, 2, 2, 2, 2, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1,
            1, 0, 1, 2, 2, 0, 2, 1, 2, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 2, 2, 1, 1, 0, 1, 1, 2, 2, 0,
            0, 0, 2, 0, 0, 2, 2, 2, 2, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2,
            1, 2, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 2, 1,
            1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 2, 0, 1, 1, 0, 1, 2, 2, 0,
            2, 0, 0, 1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 2, 1, 1, 1, 0, 1,
            0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 2, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0, 0,
            0, 1, 1, 0, 2, 2, 0, 0, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0, 0, 1,
            1, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2,
            2, 2, 1, 0, 1, 1, 2, 0, 1, 1, 2, 0, 0, 1, 0, 2, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0,
            1, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2,
            1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 0, 1,
            0, 1, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 0, 2,
            0, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1, 0, 1, 1,
            2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 1, 2, 1, 2, 2, 0, 0, 2, 1, 0, 2, 1, 2, 2,
            0, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 0, 2, 2,
            0, 2, 1, 1, 0, 1, 0, 2, 0, 2, 2, 0, 1, 2, 1, 0,
        ]),
    );
    let c: Seq<i128> = Seq::from_native_slice(&[
        1857, 1746, 1704, -753, 1794, -1323, 1461, -2259, 2310, 1293, -753, 492, -1767, 912, 135,
        -708, 201, 351, 2283, -2241, 1380, -1800, -624, -1890, 132, -2190, -453, -723, 285, -816,
        -2214, 1404, 1215, -1896, 444, -189, -1782, -954, -861, 1668, 393, -1629, -723, 2259, -570,
        -381, 1527, 81, 795, 525, 2304, -1161, 603, -978, -1509, 1533, 18, 1743, 1929, -1176,
        -1980, -1680, 1557, -1161, -942, 678, -2208, -1956, -825, 1212, -330, -996, 594, 2220, 750,
        -1092, -1158, -480, 1464, 1044, -480, 507, -1086, 2127, -24, 180, -1383, 1842, -2010, 135,
        -1845, -1710, -756, 2250, 2268, -1674, 1398, -963, -924, -702, -435, 2211, 2121, -966, 717,
        -2100, 108, 1017, 2310, -57, 189, 1440, -2010, 2058, 831, 1236, 2061, -939, 513, -1653,
        681, -2049, -1854, 57, 225, 495, -1236, 2154, 1413, 1662, -1227, 666, -1365, -1788, -1914,
        1920, 510, -2211, 1545, 1647, 600, -2031, -456, 1185, -2292, -804, -1761, -384, -1206, 372,
        -1338, -2217, 1248, -801, 1455, 951, 1770, -108, 939, -888, 1104, 219, 1731, 1200, -2187,
        1479, -1284, 2088, 1947, 1635, 1296, -2094, 501, -1299, 51, 1503, -867, -1761, -1815, 987,
        -648, -1503, 627, 2067, -48, 1449, 1539, -1065, 780, -1125, -2145, 2265, -264, -792, -2202,
        903, -1320, -384, 945, -1779, 540, 42, 351, 1149, -1698, -1344, -183, 294, -1407, -417,
        126, -495, -1671, 564, 69, -168, -783, -1365, 846, -273, -831, -948, -1578, -15, -822,
        -1413, 2241, -1893, 2283, 1863, 642, 855, 471, 1794, 1062, -1791, 627, -15, -987, 591, 804,
        1641, -798, -573, -183, 1734, -2070, -2031, -1695, 2178, 2103, -12, 459, -1545, 1680, 741,
        33, -438, -606, 786, 1374, 1089, -2154, -1785, 972, 1908, 1938, -1026, -39, 483, -954,
        -849, 2001, -921, 201, -342, 708, -747, 123, -1335, -30, -423, -1452, -852, -2184, 2148,
        -1734, -591, -1110, 1563, 1686, -54, -1122, -141, -663, -933, 2034, -1713, -696, 2052,
        1452, -1308, -2283, -1737, 867, -117, 1026, -267, -570, -2049, 1827, 1737, 1644, 2250,
        -810, 1008, -630, 1065, 1425, 822, -942, -930, -1161, 1917, -699, -1341, -1710, -1380,
        1029, 1968, 1728, 675, 1920, -2178, 216, -453, -1401, 1599, 588, -2244, -885, 2211, 2196,
        -1557, -1650, 1863, 1044, -465, 183, 600, -2277, 1590, -459, 1104, -396, 1230, -663, -1302,
        1539, 684, 1167, 168, -1032, -702, -291, -621, 369, -1200, -1884, -1590, -36, 1713, -2202,
        114, 1602, 297, -1911, 1446, -132, -717, 867, 1536, -1686, -2151, 2214, -168, -1290, 147,
        1995, 1893, -1587, -579, 1767, -2193, 1611, 747, -1923, 1695, 1905, 444, 1944, -411, 1233,
        165, 1857, -1065, -1419, 405, 63, 1176, -354, 834, 1656, -1338, -1497, 1893, 1935, -1875,
        -318, 1920, 6, 168, 1407, 207, 1623, 1314, 1446, -1788, -600, 1608, 486, 1368, 1959, 564,
        1236, -612, -2052, -1464, -1116, 2235, 78, -1191, 168, 1410, 2145, 618, 294, 1275, 2052,
        -1062, 2160, -402, 2151, -429, -1539, 2082, -1125, -1104, 1602, -546, 72, 942, 1746, -1563,
        1455, -2295, -240, -186, 876, 1794, 420, -201, 1632, 123, 1776, -933, 939, 1602, 2079,
        2037, -1245, -315, -1905, 2157, 873, -183, 57, 2223, -2193, -1767, 30, -1452, 1323, 252,
        2283, -2301, -474, -1434, -12, -909, -1728, 2127, -1194, 912, 315, -1749, 1170, 366, 1635,
        -183, 2301, 1626, 1653, 621, 492, 1590, -195, -666, -267, 1929, -1533, 2007, 1929, -114,
        2244, 1311, -1851, -123, -1221, -2052, 1956, -1689, 978, -1776, 1629, -873, -2100, 993,
        309, 1851, 912, -1116, -2133, 18, -1227, 84, -1509, -438, -132, -501, 615, 282, 1860, 1680,
        1122, 2244, -375, -2073, 1353, -1704, 1293, 1950, 324, -1410, 132, -261, -1896, 1440, -342,
        -1848, 1698, 273, 2265, -249, 168, 1395, -1050, 117, -2163, -12, -2142, 1725, 1176, 1998,
        -2256, 1623, -1383, 1287, -555, -1968, -888, 1695, -933, 105, 429, 2052, -18, 435, -660,
        1194, -42, 2256, 27, 963, 1782, -1593, 900, 75, 597, 534, -1815, 600, 315, -1113, -1533,
        -159, 1302, -531, 2130, 489, 1140, -1179, -330, 1911, 780, -1260, -1530, 165, 477, 1755,
        -2118, -1380, 636, -1893, -1683, -1836, 1965, -1752, 738, -753, 1512, -786, 621, -2244,
        -2076, 1008, 753, -1458, -672, -1782, -1695, -780, -1596, 0,
    ]);

    let n_v = get_parameters(Version::NtruPrime653);
    let cipher = encrypt(&m, &pk, &n_v);
    for i in 0..cipher.len() {
        if cipher[i] != c[i] {
            panic!("NTRUps653 failed");
        }
    }
    let message = decrypt(&cipher, &sk, &n_v).unwrap();
    for i in 0..m.len() {
        if message[i] != m[i] {
            panic!("NTRUps653 failed");
        }
    }
}

#[test]
fn kat_ntru_prime_761() {
    let m: Seq<i128> = Seq::from_native_slice(&[
        -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 1, 0, 0, -1, 0, 0, 0, 0,
        -1, -1, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, 0, 1, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0,
        0, 0, 0, -1, 0, 1, 0, 0, -1, 1, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1,
        0, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0,
        0, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1, -1, -1, 0, -1, -1, 0,
        -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0,
        0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0,
        -1, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 1, -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1,
        0, 0, -1, -1, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0,
        0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0,
        -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1,
        0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 0,
        -1, 0, 0, 1, -1, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, -1, 0, 0, 0, 0, 1, -1, 0, 1, -1, 0,
        0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0,
        0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 1, 0, 1, -1, -1, 0, 0, 0, -1, 0,
        0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1,
        0, -1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1,
        -1, -1, 0, 0, 0, -1, -1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0,
        -1, 0, 0, 0, -1, 0, 1, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0, 0, 0, 1, 0, 0, -1, 0, 1, 1,
        0, 1, 0, 0, 0, 0, 1, -1, -1, 0, 1, 0, 0, -1, 0, 0, -1, 1, -1, 0, 0, 0, 1, 0, 0, 0, 0, -1,
        0, 0, 1, 1, 1, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, -1, 1, -1, -1, 0,
        0, -1, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 1, 1, -1, 0, 0, 0, -1, 1, 0, -1, 0, 0, 0, 0, -1, 0,
        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0,
        -1, 0, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, -1, -1,
        0, -1, -1, 1, 0, -1, -1, 1, -1, -1, 0, 0, 0, 0,
    ]);
    let pk: Seq<i128> = Seq::from_native_slice(&[
        4045, 2658, 2040, 3305, 435, 4485, 452, 3321, 3422, 224, 3458, 1984, 2782, 1428, 3443,
        1354, 966, 3359, 2855, 388, 69, 413, 3661, 2751, 3804, 3915, 653, 4348, 3569, 4209, 3448,
        3258, 3243, 1878, 1615, 676, 1228, 2242, 463, 4436, 3346, 2113, 1808, 3056, 925, 2188,
        3833, 2840, 535, 2228, 4239, 1060, 3345, 2643, 2833, 1930, 4352, 2385, 1568, 3027, 3007,
        4149, 3285, 2609, 2499, 1755, 267, 3353, 215, 695, 657, 728, 301, 3971, 4115, 17, 4028,
        3803, 2495, 3919, 1507, 952, 2261, 2876, 907, 2185, 1885, 670, 1468, 2849, 2507, 1390,
        1512, 1570, 810, 3854, 4553, 2282, 1892, 2446, 4425, 2513, 2570, 2325, 2719, 3549, 3002,
        1238, 905, 533, 1263, 2223, 1452, 3588, 802, 3392, 2277, 4195, 1604, 1313, 3693, 1764, 146,
        1562, 4343, 2039, 2029, 4151, 1864, 605, 936, 3712, 2751, 2836, 2447, 412, 4530, 2543,
        1673, 3750, 4493, 3911, 263, 3991, 2926, 1441, 2047, 326, 1676, 1682, 212, 3261, 2169, 900,
        864, 2995, 3601, 1999, 1850, 2760, 4488, 3596, 1647, 3498, 4534, 948, 3785, 508, 826, 3969,
        529, 2818, 2741, 1247, 4129, 2938, 1416, 255, 1605, 2642, 4215, 1329, 1974, 1419, 3456,
        1563, 4022, 541, 3108, 1514, 2333, 3056, 1292, 1555, 3614, 4468, 3921, 967, 548, 3689,
        4257, 642, 438, 2650, 3290, 559, 3621, 1190, 3159, 2702, 1855, 2574, 3923, 3255, 2560, 280,
        4299, 2942, 2234, 2229, 277, 101, 887, 2415, 3392, 4570, 1923, 2761, 2129, 2151, 1242, 969,
        3722, 1938, 4121, 3096, 184, 3212, 251, 2409, 357, 4424, 393, 257, 2276, 2503, 3496, 2307,
        3972, 372, 94, 1415, 17, 3622, 1234, 1691, 1476, 2807, 73, 1274, 1310, 2622, 115, 2195,
        4505, 3367, 136, 4362, 438, 3009, 465, 3557, 2119, 1786, 1016, 4166, 972, 3886, 2900, 722,
        2884, 553, 531, 230, 264, 3878, 2305, 3569, 3202, 3889, 1072, 2512, 169, 1508, 1046, 1581,
        649, 2334, 1165, 323, 3791, 2380, 301, 2397, 3050, 276, 155, 2251, 514, 1316, 132, 1874,
        486, 4554, 2663, 1962, 1608, 1532, 1849, 182, 2149, 3030, 296, 4338, 230, 2940, 264, 3075,
        2562, 205, 3943, 261, 3749, 4509, 3892, 1445, 4214, 1011, 3168, 4110, 2996, 4203, 3905,
        1600, 619, 3758, 128, 393, 1049, 241, 1532, 1439, 3417, 4011, 157, 2775, 2077, 3749, 753,
        2182, 4279, 2322, 1835, 58, 1224, 690, 3016, 4011, 2726, 1052, 3291, 4266, 3321, 4515,
        3742, 4143, 1849, 453, 2256, 2609, 3693, 3085, 528, 3941, 3659, 959, 4465, 4534, 3013,
        3878, 3564, 3403, 4042, 678, 3415, 1364, 4402, 327, 3840, 244, 4372, 4199, 450, 2442, 169,
        3671, 4223, 1288, 1838, 525, 4275, 504, 3638, 3869, 1972, 712, 3989, 4076, 3224, 1675,
        1876, 4089, 4285, 3246, 4296, 3368, 1948, 3189, 3340, 3929, 3863, 869, 2573, 740, 2341,
        2295, 3968, 1309, 203, 246, 2442, 674, 3189, 1093, 150, 4537, 2934, 2245, 3992, 603, 3711,
        3109, 4233, 3516, 3306, 2653, 2830, 2609, 885, 3980, 3628, 4384, 3929, 3849, 2333, 4470,
        3992, 3295, 4476, 693, 4333, 2232, 276, 4522, 3826, 1441, 1303, 2275, 2801, 666, 3088, 96,
        1478, 536, 2470, 1913, 1975, 1320, 104, 2265, 1533, 3139, 4316, 27, 2587, 1282, 814, 2562,
        2762, 2897, 3837, 503, 1531, 1150, 3464, 1679, 533, 4240, 1705, 4008, 1823, 1135, 3823,
        4396, 2510, 3640, 2783, 2035, 1470, 3479, 3851, 799, 4388, 2909, 3839, 4026, 866, 915, 809,
        3689, 2917, 2665, 4207, 2256, 1976, 3240, 4318, 3447, 3181, 3044, 2026, 3043, 3431, 736,
        3292, 1198, 2721, 1388, 590, 1241, 1679, 372, 909, 3368, 855, 1318, 3166, 790, 2295, 2905,
        737, 3476, 4576, 439, 3436, 119, 2411, 1246, 176, 1263, 2604, 4536, 937, 3148, 4357, 412,
        1116, 1240, 1305, 1155, 3496, 1184, 2371, 3984, 2177, 1764, 2138, 4246, 1598, 2385, 2742,
        558, 926, 1547, 308, 998, 721, 1214, 4152, 1835, 2350, 4285, 3643, 1540, 2356, 1700, 1824,
        616, 3821, 412, 3439, 66, 4400, 4567, 1884, 3666, 2166, 1550, 3978, 3473, 679, 2167, 2443,
        597, 1680, 1530, 2984, 4246, 2163, 1751, 407, 765, 741, 3329, 1174, 4484, 1359, 83, 199,
        1718, 3389, 3721, 721, 314, 2860, 3343, 1675, 261, 3481, 145, 4563, 3176, 1748, 3970, 2831,
        3407, 193, 4161, 320, 4301, 4436, 4540, 3457, 3517, 3463, 3812, 122, 3977, 333, 4504, 2805,
        1415, 3557, 4350, 4541, 3447, 3645, 3018, 1350, 2053, 2414, 2481, 3298, 2896, 3777, 2764,
        2095, 3162, 4022, 4044, 2193, 3482, 427, 4336, 796, 1615, 2044, 4359, 1034, 4075, 1842,
        2018, 2946, 3917, 3225, 486, 239, 2679, 2704, 3245, 3442, 348, 1422, 3544, 2936, 2816,
        2154, 2211, 2592, 370, 64, 4454, 1268, 1035, 4390, 777, 4530, 1201, 1770, 185, 2507, 1014,
        1032, 1313, 3989, 3998, 495, 1768, 872, 2251, 3199, 2333, 2991, 76, 2044, 1190, 614, 4116,
        3945, 2583, 3630, 3456, 3491, 2166, 3112, 1973, 2733, 1059, 3099, 1370, 1096, 0,
    ]);
    let sk: (Seq<i128>, Seq<i128>) = (
        Seq::from_native_slice(&[
            0, 0, 1, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, 0,
            0, 0, -1, -1, 0, -1, 0, -1, 0, 0, 0, 1, 0, 1, 1, 0, 0, -1, 0, 1, 0, -1, -1, 0, -1, -1,
            -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0,
            -1, 0, -1, 0, -1, -1, 0, 0, -1, 0, 0, 0, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, 0,
            0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, -1, 1, -1, -1, 0, -1,
            0, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0,
            0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 1, 0, 0,
            0, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, -1, 1, 0, 0,
            0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0,
            -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, -1, 0,
            0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0,
            -1, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 1, -1, -1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0,
            -1, 0, -1, -1, 0, 0, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, -1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1,
            0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, 0, -1, 0, 0, 0, 1, 1,
            -1, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 0, -1,
            -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0,
            1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 0,
            -1, 0, 1, 0, 0, -1, -1, 0, -1, 0, 0, 1, 1, 1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0,
            -1, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, -1, 0, 0, -1, -1,
            0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 1, -1, 0, 0, 1, 0, -1, 0, 0, 0, 1, 1, 1, -1, -1,
            0, 0, -1, 0, -1, 0, -1, 1, 1, 1, 0, 0, 1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, 0, 0,
            0, -1, 0, 0, 1, 0, 0, 0, -1, -1, -1, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1,
            0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 1, 1, 1, 1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0,
            0, 0, 1, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, -1, -1, -1, 0, 0, -1, 0, -1, 0, 1, -1, 0, 0,
            0, 1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, -1, 1, 0,
            0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0,
        ]),
        Seq::from_native_slice(&[
            2, 2, 1, 1, 2, 0, 1, 0, 0, 0, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 2, 0, 2,
            1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2,
            2, 2, 1, 0, 2, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 0, 0,
            0, 1, 0, 0, 1, 2, 2, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 1, 2, 1, 0, 0, 1, 1, 1, 1,
            1, 0, 0, 2, 1, 1, 1, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 2, 1, 1, 0, 1, 2,
            0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 2, 2, 0, 0, 0, 2, 1,
            2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 0,
            2, 0, 0, 1, 2, 0, 1, 0, 2, 2, 1, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1,
            1, 0, 0, 2, 1, 0, 2, 0, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 2, 1,
            0, 1, 0, 1, 2, 2, 0, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 0, 2, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,
            1, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1,
            2, 1, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0, 1, 0, 1, 1, 1, 0,
            2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 1, 0, 2, 0, 1, 0, 2, 1, 0, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1,
            0, 0, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 2, 1, 0, 2, 2, 2,
            0, 2, 1, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 2, 0, 0, 2, 1, 0, 1, 2, 1, 1, 2, 2, 2, 0, 2,
            1, 2, 2, 0, 0, 1, 0, 1, 2, 1, 2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 2, 1, 2, 2, 0, 2,
            2, 0, 0, 1, 2, 1, 0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2,
            0, 2, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 2, 1, 2, 2, 2,
            2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 1, 0, 1, 2, 2, 1, 2, 0, 1, 1, 0, 2, 0, 2, 1, 2, 0, 2,
            1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 2, 1, 1, 2, 0, 2, 1, 0, 1, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0,
            1, 0, 1, 0, 1, 1, 1, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0,
            1, 2, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 2, 0, 2, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 0, 1, 1, 0,
            1, 2, 1, 2, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 1, 2, 1, 2, 2, 1, 1,
            0, 2, 1, 2, 1, 0, 1, 2, 1, 0, 2, 1, 1, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2,
            1, 2, 0, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1,
            2, 0, 0, 0, 2, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 2, 2, 0, 2, 0, 1,
            0, 2, 1, 0, 2, 1, 2, 0,
        ]),
    );
    let c: Seq<i128> = Seq::from_native_slice(&[
        243, 360, 306, -942, -894, 1233, 1566, -1752, 1176, -324, 165, -258, 843, -1998, -528,
        2190, 1161, 270, -303, 1569, -765, 1794, -1440, 2283, -2163, 963, 1698, -981, 1287, 1305,
        -519, 1992, -1956, -1911, 195, 945, -636, -861, -2028, 1884, 885, 840, -1284, 2190, -1551,
        156, -2208, 1734, -765, -843, -342, 414, 2151, 600, 1704, -714, -90, 1317, -2076, -507,
        1980, 882, -2268, 642, -1314, -87, 762, 1494, -2187, -954, 801, -1176, -1575, 1362, 741,
        1476, -2049, 1692, -1026, -1782, 63, 564, 711, 1014, -588, -2013, -195, 1446, -525, -1071,
        -30, -1890, -1680, -1875, -735, 360, 2253, -651, 150, 2211, 264, -57, -951, 894, 2010,
        1719, 468, 1032, 15, 1866, -108, 2028, -1275, 522, -714, 276, -1047, -2205, -21, 894,
        -1971, 858, -1149, 1320, 1506, 2247, -1275, -1866, 1335, -2208, -84, 1947, 195, 219, 1788,
        -291, -2106, -774, 747, 210, -1059, -591, -24, 2232, 393, -1596, -1935, -1662, -120, 1911,
        1254, 1968, 204, -414, 1038, -792, 1050, 2043, -1740, 1164, 135, 1584, 924, 1677, -2082,
        -45, 1470, 1620, 753, 126, -897, -1617, -177, -1803, -2274, -1212, 864, -2124, -1629, 630,
        -48, 1938, -2055, -1365, 591, 552, 1512, 483, -726, -855, -1581, 1509, -726, -2085, -1836,
        -1569, -1707, 1665, -273, -1545, -1500, -387, -261, 1197, -2097, 777, 2124, 1626, 1992,
        -1296, 1917, 1260, -1422, 2148, 537, -282, 1554, -2100, -1287, 1365, 1290, -888, -432,
        1425, -1074, -1938, -1530, 345, 1677, 348, -954, 771, 363, 1932, -57, 1608, -1080, 2043,
        1704, 888, 2049, -993, -2145, -1248, 828, -582, -1608, -510, -1269, 780, 1680, 1107, 1068,
        234, 1863, -522, 768, -915, -1956, 678, 894, -936, 1722, -984, -819, 765, 882, 1152, 414,
        336, 105, 1125, 1818, 1671, 1959, 819, 1353, -1989, 2073, 942, 1869, 2130, -1437, 2133,
        -1047, 387, -693, -1275, 2094, 1611, -2028, -2070, -258, 72, -69, 1620, 1488, -1041, 471,
        2106, -1383, 1623, -2262, 1272, -111, 546, 381, -2073, 1536, -1785, -1137, 1665, 297,
        -1086, 441, -1425, -2082, -78, 348, 1266, -159, -549, -48, -1593, 1737, -2154, -198, 891,
        -2049, 417, 327, -2115, 2016, 1938, -1539, 1155, 1797, 1908, 1443, -1038, 2187, 618, -1692,
        -1818, -1761, 1878, 2268, -126, 1134, -123, -1335, -978, 15, 879, 1620, -1422, -2181, 570,
        912, 804, 2157, -1419, -2247, 2127, -2205, 135, 1425, 549, -1632, 957, 306, -2082, 2205,
        -1044, 843, 1695, -474, -471, 993, -411, -1563, 588, -189, -1254, 201, 837, -288, -1410,
        -453, -504, 1050, -927, 249, 1959, 1797, 558, -1284, -213, -1335, -1536, -525, 1122, -285,
        -96, -1587, -549, -624, 1767, 765, -270, 537, 1239, -1140, -1863, 579, -2295, -870, -1296,
        -1167, 984, -657, -1278, 2262, 792, -492, 2169, 1632, -1161, -765, 1929, -2229, 336, -1308,
        -1551, -561, 951, 558, -435, -888, 2127, -1428, 1476, -1206, 2025, 1320, 564, -306, -354,
        1068, 744, -468, -408, -1428, -2103, -1452, -1038, -1011, -237, 459, 1503, -1179, 1890,
        -1749, 1008, 930, 468, -2010, -492, -1197, 1854, -1701, 1731, 1752, -840, -2160, 2157, 804,
        174, -1932, 1335, -213, -1929, 1539, 1755, -1869, 825, -1821, 945, -1383, 885, -1332, -516,
        1110, 1707, 1935, 1908, -792, -1449, -2229, -507, 2208, 237, -42, -285, 330, 1740, 48,
        -411, -24, 1677, -342, 1785, 285, 2142, -1686, -267, 915, -1572, -1413, 1836, -1023, 198,
        -960, 1659, -1890, 963, -1968, -2124, 861, 1002, -1338, 1173, 2247, -984, -441, 1503,
        -1650, -123, 408, 612, -1269, 1047, 597, 1608, -1770, 435, 1410, -732, 369, -2187, -2229,
        -795, -567, -2268, 897, 1896, -582, -1326, 1767, -2028, 516, 1962, -1977, -2100, -1362,
        1920, 555, -579, 1668, -759, -2022, -1137, -1503, -2277, -1860, -219, -1362, -474, -1695,
        -1467, -1629, -1407, -618, 1158, 2085, -1782, -2034, 1095, 609, -1878, 960, -1797, -1890,
        -2190, -1599, -1314, -861, 1050, 348, -2238, 1524, 1935, 309, -843, 1224, -1197, -2076,
        2235, -1074, -1434, 675, 1515, -84, -1800, -891, 87, -393, -885, 54, 981, -552, 1272, 2112,
        -1626, 1329, -543, 1584, -768, 1020, -1716, 1104, 2037, 2010, 1752, -1653, 1779, 1437,
        1845, 1305, -1203, 2283, -84, 825, -645, 213, -774, 744, -2040, -573, 2217, 972, -1929,
        1884, -1236, 27, -393, 483, -1002, 1782, -2190, 1239, -1818, -822, 264, -1053, -1209,
        -1449, 1197, -834, -636, 387, 1107, 744, -255, -2040, -234, 456, 984, 2235, -501, 1359,
        1254, 969, 264, -945, -906, 129, 2196, 1743, 390, 1668, 1629, 1845, 288, 549, -1830, -1005,
        996, -2085, 849, 408, -1083, 1155, -2115, -1983, -2025, -255, -612, 1794, -1935, 2178,
        -726, 1896, 225, -1974, 996, 63, -2271, -909, 54, -1758, 1458, 792, 831, -1140, 1701, -978,
        -1998, 177, -1002, -672, -222, 1329, 2013, 789, 1554, 180, 732, 519, 315, -960, 471, 723,
        -993, 744, -2070, -2193, -1878, -120, -897, 1977, -465, -2064, -1086, -1260, 906, -1248,
        -810, -537, 345, -9, 0,
    ]);

    let n_v = get_parameters(Version::NtruPrime761);
    let cipher = encrypt(&m, &pk, &n_v);
    for i in 0..cipher.len() {
        if cipher[i] != c[i] {
            panic!("NTRUps761");
        }
    }
    let message = decrypt(&cipher, &sk, &n_v).unwrap();
    for i in 0..m.len() {
        if message[i] != m[i] {
            panic!("NTRUps761 failed");
        }
    }
}
#[test]
fn kat_ntru_prime_857() {
    let m: Seq<i128> = Seq::from_native_slice(&[
        -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, 0, -1, 0,
        0, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 1, -1, -1, -1,
        -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, -1, 0,
        0, 1, 1, 0, -1, 0, -1, 0, -1, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0,
        0, 0, 0, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1,
        -1, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1,
        0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 0, 0,
        0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0, 0, -1, 0,
        -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0,
        0, 1, 0, -1, -1, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0, 1, 0, -1, 1, 0, 0, 0, -1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0,
        -1, 0, 0, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, -1, 0, 0,
        0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0,
        -1, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 1,
        -1, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 1, -1, 0,
        0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0,
        0, 0, -1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        1, 0, 1, -1, -1, 0, 0, 1, 0, -1, 0, 0, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0,
        0, -1, 0, 0, 0, -1, 0, 1, 1, 1, -1, 0, 1, -1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1,
        0, 0, -1, -1, -1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, -1,
        0, 0, 0, -1, -1, 1, -1, -1, 0, 0, 0, 0, 0, -1, -1, 0, 1, -1, 0, 0, 0, 0, 1, 0, 0, -1, 0, 1,
        1, 0, 1, 0, 0, 0, 0, 0, 1, -1, -1, 0, 1, 0, 0, -1, 0, 0, -1, 1, -1, 0, 0, 0, -1, 1, 0, 0,
        0, 0, -1, 0, 0, 1, 1, 1, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0,
        -1, 1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0, 1, 1, -1, 0, 0, 0, -1, 0, 1,
        1, -1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, 0,
        0, -1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 1, 0,
        1, 0, 1, 0, 0, 1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 1, 0, -1, 0, -1, 1, -1, -1, 0, 0, 0, 0,
    ]);
    let pk: Seq<i128> = Seq::from_native_slice(&[
        4712, 3175, 1727, 4742, 3523, 2357, 5021, 4100, 3879, 353, 3191, 4858, 4101, 1795, 1611,
        2762, 1671, 3826, 2845, 5110, 2200, 1967, 4947, 1117, 1801, 3355, 1596, 1808, 3428, 5097,
        1923, 602, 4623, 5111, 3763, 5016, 1795, 145, 1298, 1048, 5085, 4635, 3927, 2515, 1497,
        927, 3307, 1670, 2957, 4769, 985, 5076, 1993, 2668, 4923, 1934, 2342, 1455, 2170, 4701,
        703, 4751, 1238, 3982, 2591, 4724, 2322, 4848, 4295, 1070, 4186, 4142, 586, 3887, 553,
        3925, 4290, 2226, 2362, 5147, 4784, 814, 5099, 5032, 1058, 3873, 367, 4499, 1509, 3686,
        1044, 1808, 262, 516, 264, 3967, 3415, 4210, 2331, 4002, 2486, 284, 478, 307, 2539, 2200,
        2833, 4742, 1186, 3814, 1715, 1026, 2041, 2959, 4650, 4962, 4610, 182, 4823, 2228, 3134,
        2234, 449, 4965, 4246, 1855, 3565, 457, 2242, 4168, 1560, 4456, 965, 2350, 3418, 2719,
        3859, 4563, 2482, 5127, 1274, 3757, 3345, 928, 3527, 148, 2999, 2291, 650, 3175, 4622,
        3884, 2634, 995, 1105, 683, 4936, 5051, 3616, 835, 1038, 2825, 1783, 2786, 1174, 3521,
        4628, 1996, 980, 2846, 4836, 2349, 3816, 2115, 66, 4751, 3525, 4503, 3222, 4705, 962, 2351,
        1241, 968, 3146, 5141, 1909, 4353, 3479, 1036, 1871, 4142, 3658, 1304, 3966, 2407, 354,
        4876, 1034, 2880, 1496, 525, 1258, 3161, 1638, 869, 4309, 2768, 36, 5029, 3646, 92, 3236,
        489, 527, 189, 3587, 805, 1647, 2965, 4448, 2096, 3752, 2185, 1839, 2918, 149, 2993, 1557,
        4417, 1606, 1923, 4792, 171, 3581, 4712, 4843, 4042, 4011, 4773, 3517, 5124, 2960, 4879,
        4072, 3303, 4861, 2208, 1088, 3367, 2260, 2498, 3315, 2474, 5078, 3703, 5033, 2894, 3779,
        490, 4496, 4998, 4552, 1842, 3502, 2196, 1073, 1289, 1467, 3435, 3002, 3274, 2972, 4407,
        1397, 1767, 3312, 2331, 4411, 493, 1017, 1243, 4328, 5018, 2102, 349, 3095, 1716, 3355,
        939, 4624, 2487, 1821, 2498, 2119, 3053, 3680, 2068, 4960, 4797, 3539, 2333, 4620, 1322,
        2080, 521, 1760, 3116, 5055, 3980, 3897, 2635, 4589, 3243, 4595, 4783, 1279, 4897, 2564,
        62, 1796, 2535, 1895, 3816, 236, 2149, 2947, 966, 509, 851, 3800, 3929, 2184, 1572, 3711,
        1048, 3202, 4300, 3384, 102, 4330, 3684, 4649, 3324, 2964, 1087, 2137, 3770, 3720, 1352,
        2233, 2555, 3560, 2773, 1269, 3291, 3506, 1902, 4822, 2361, 238, 2975, 741, 2275, 508,
        3373, 2446, 4794, 794, 4653, 3829, 3634, 2800, 4416, 2879, 1007, 4224, 748, 1195, 1148,
        372, 2077, 1049, 3875, 4042, 444, 347, 2485, 3808, 4, 3769, 4580, 4944, 1778, 975, 2375,
        367, 1574, 4718, 3387, 4265, 2926, 4671, 4191, 3779, 310, 666, 4263, 3318, 2072, 3697,
        3368, 214, 630, 3143, 3973, 1133, 99, 471, 1737, 2730, 1374, 3795, 2354, 764, 66, 3625,
        1715, 476, 860, 1298, 2163, 1890, 3697, 4451, 4645, 3347, 4639, 103, 175, 77, 2964, 1764,
        4483, 3305, 4579, 4097, 2516, 805, 4613, 4947, 3898, 1783, 1643, 22, 966, 4697, 883, 3951,
        4369, 821, 4916, 252, 3616, 1746, 2480, 2326, 807, 1241, 3013, 4141, 4480, 3491, 2432,
        4130, 1022, 3940, 2026, 4453, 3223, 3180, 2552, 905, 3867, 4054, 664, 2675, 2833, 2809,
        691, 2867, 537, 5155, 1901, 2982, 2852, 2606, 4802, 1755, 2023, 2491, 469, 2383, 4480,
        1200, 3866, 4456, 2565, 1007, 36, 2956, 421, 316, 4394, 4066, 1217, 2741, 3372, 2072, 68,
        4274, 578, 1460, 3537, 3002, 1027, 3720, 148, 129, 335, 4464, 264, 3641, 3857, 1244, 3065,
        2464, 98, 2291, 4660, 2358, 3953, 5052, 4579, 2496, 3296, 184, 457, 2676, 2090, 1152, 4651,
        2342, 870, 406, 920, 4381, 4017, 1741, 904, 3597, 2723, 433, 568, 3160, 4339, 3666, 4287,
        3992, 3433, 1586, 1138, 907, 1189, 3031, 23, 4528, 461, 1850, 415, 5023, 3400, 4028, 3446,
        1919, 2331, 3389, 4158, 641, 1220, 2761, 1629, 3222, 4831, 3569, 1918, 2009, 2533, 4357,
        549, 3097, 1, 1531, 2089, 3660, 3840, 2621, 3146, 381, 167, 37, 228, 4860, 3528, 3264,
        3961, 3305, 4659, 1551, 2210, 3546, 4339, 4023, 2972, 1352, 717, 533, 4270, 4076, 1816,
        2714, 867, 238, 2701, 4991, 533, 4475, 272, 424, 1362, 1641, 1154, 3502, 1398, 4468, 3497,
        4982, 4630, 1710, 3969, 4308, 624, 184, 466, 1388, 984, 1008, 285, 4278, 530, 2267, 3756,
        4944, 3342, 2751, 1433, 846, 2229, 4794, 575, 210, 768, 3482, 4356, 4485, 249, 4387, 3298,
        1894, 4319, 4788, 2681, 4115, 66, 1129, 3295, 4870, 3401, 2957, 3502, 4009, 4312, 2713,
        1960, 4492, 715, 1297, 377, 4843, 2627, 4644, 1912, 3718, 2, 1992, 1181, 3817, 4106, 4443,
        3962, 3185, 4811, 3793, 1316, 1872, 929, 1725, 1237, 4454, 2416, 3425, 4201, 2465, 3735,
        2479, 1892, 666, 4166, 3519, 1643, 4003, 5163, 2335, 4784, 3035, 714, 234, 4396, 2423,
        1427, 4333, 2575, 1983, 2344, 1216, 3983, 1523, 307, 1755, 771, 2485, 4389, 1347, 2748,
        3185, 1094, 4156, 3171, 2874, 4966, 2695, 4022, 2573, 2923, 1759, 796, 1687, 3071, 1105,
        1161, 5056, 3011, 5061, 4182, 655, 722, 3459, 2540, 2224, 2348, 2180, 4508, 1226, 4102,
        1779, 2614, 4633, 2760, 3237, 3483, 3105, 420, 5148, 2170, 3669, 223, 3908, 580, 4027,
        4646, 276, 4267, 2657, 3988, 2731, 1029, 952, 1898, 496, 3946, 3392, 4461, 4746, 1955, 174,
        1225, 4284, 4601, 1434, 4688, 545, 83, 106, 2278, 4634, 18, 3771, 2119, 4008, 519, 4130,
        2240, 3526, 1352, 1106, 1556, 369, 1173, 157, 2095, 699, 1756, 1523, 4510, 4897, 3022,
        2280, 1507, 172, 299, 2417, 3287, 689, 2223, 4040, 4950, 3471, 0,
    ]);
    let sk: (Seq<i128>, Seq<i128>) = (
        Seq::from_native_slice(&[
            0, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1, -1,
            0, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1,
            0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, -1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0,
            1, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0,
            0, 1, 1, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 1, 0, 0, -1, -1, 0, 0, 1, 1, 0, 1, 0, -1,
            0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0,
            -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0,
            1, -1, 1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 0, -1, -1, -1, 0,
            0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1,
            0, 0, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 1, 0, -1, 0,
            -1, -1, 0, 0, 0, -1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0,
            1, 0, -1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, -1, 0,
            0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0,
            0, 0, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, 1, -1, 0, 0, -1, 0,
            -1, -1, 0, 1, 0, 0, 0, -1, 0, -1, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 1, 0, 0, 0, 0,
            -1, -1, 0, -1, 0, -1, 1, 0, 0, 0, 1, 0, 0, 0, -1, -1, 1, 0, -1, -1, 0, 0, -1, 0, 0, 0,
            0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 0, 0, 0, 1, -1, 0, 0, -1,
            -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, -1, 0, -1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 0,
            -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
            0, 1, -1, 0, 1, 0, 1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0,
            -1, 0, 1, 1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1,
            -1, 0, 0, 1, 0, 0, 0, 1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, 0, -1, 0, 1, 0, 0, -1, 0, 0,
            0, 0, -1, -1, 0, 0, -1, -1, 1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, -1, 1, 0,
            0, 0, -1, 0, 0, 1, -1, 0, 1, 0, 0, -1, -1, 1, 0, 1, 0, 1, -1, 0, 0, 0, 0, 1, -1, -1, 0,
            0, -1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 1, -1, 0, -1, -1, 0, 0, 1, -1, 0,
            0, 0, 0, -1, 0, -1, -1, 0, 1, 1, 0, 0, 1, 0, -1, 0, 0, 1, 1, 0, -1, -1, -1, 0, -1, 0,
            0, 1, 0, 1, -1, 0, -1, -1, 0, 0, 1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 1, -1, 0, -1, 0, 0,
            0, 1, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,
            0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, -1, 0, -1, 0, 0, 0, 1, 1, -1, 1, 0, -1, -1, 0, 0, 0,
            0, 0, -1, 0, 0, 0, -1, -1, 0, 0,
        ]),
        Seq::from_native_slice(&[
            2, 2, 1, 0, 2, 2, 1, 0, 1, 0, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 2, 2, 1, 1, 0, 0, 2, 1, 2,
            2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1,
            0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 0, 1, 1, 0, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0,
            2, 1, 1, 2, 1, 0, 1, 1, 2, 0, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0,
            0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
            0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 0, 1, 0, 0, 2, 2,
            1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 2, 1, 2, 1, 0, 2, 0, 2, 1, 2, 1, 2,
            2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 0, 1, 2, 1, 2, 2, 2, 0,
            0, 1, 0, 1, 1, 0, 0, 2, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 0, 1, 1, 0, 2, 0, 1,
            2, 1, 2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 2, 1, 2, 1, 1, 2,
            0, 0, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0,
            2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 2, 0, 2, 2, 2, 0, 1, 0, 2,
            0, 0, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 2, 1, 1, 1, 1, 2, 0, 1, 2, 0, 0, 2, 0,
            0, 1, 1, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 0, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 2, 2, 2,
            1, 1, 0, 2, 2, 2, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1,
            1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 1, 1, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 1, 2, 1, 2,
            2, 0, 2, 1, 2, 0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1,
            0, 0, 0, 2, 2, 2, 0, 2, 1, 2, 0, 1, 0, 1, 2, 2, 1, 1, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 2,
            0, 1, 0, 2, 2, 2, 1, 2, 0, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 2, 1, 0, 0, 1, 1, 1, 1,
            2, 1, 1, 1, 1, 0, 2, 1, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 2, 2, 0, 2, 1, 0, 2, 2, 0, 2, 0,
            1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 1, 2, 2, 2, 2, 1,
            0, 0, 0, 2, 1, 1, 0, 2, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
            2, 1, 2, 0, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 2, 0, 1,
            0, 1, 2, 1, 1, 1, 0, 2, 2, 0, 0, 0, 1, 0, 1, 2, 0, 2, 0, 2, 2, 1, 1, 2, 1, 2, 2, 1, 0,
            2, 1, 0, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 1, 2, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1,
            1, 1, 0, 0, 0, 2, 1, 1, 1, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1,
            2, 0, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 2, 1, 0, 1, 2, 0, 2, 2,
            2, 2, 2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1, 1,
            2, 2, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0,
        ]),
    );
    let c: Seq<i128> = Seq::from_native_slice(&[
        -402, 1809, -942, -108, -2523, -456, 1620, 357, 441, -1278, -711, -2085, -744, 339, 2136,
        1083, -198, -1911, -1542, -1908, 1005, 1680, 1251, -2568, 30, 888, -450, -444, 747, 1326,
        -1569, -312, 1284, 2088, 1185, -1440, -1602, 954, -2190, -462, 438, -1464, 1734, 1248,
        -1086, -819, 2451, -1446, 678, 2550, -2205, -2544, -2409, -609, -1356, -645, -1866, 387,
        957, -522, -948, -612, -2142, -2244, -1563, 2553, 1326, 1218, 837, 1410, 36, 1986, 786,
        -1119, -1863, 1890, 1509, 1794, 999, 2205, -1182, -846, -306, 1560, -282, -777, -1629, 798,
        -750, 1326, -2391, 1947, 1278, -522, -1068, -546, 819, -912, 852, 2295, 2553, -2196, -183,
        696, 3, 2355, 1698, 444, -447, 2421, -723, -2076, -1656, 1587, -1131, -1497, 105, 411,
        1254, -2427, -1191, -366, 2259, -2433, -1977, -2448, 1167, -1008, 687, -2556, -1605, -705,
        1386, -1215, 39, -549, 1044, -174, 1632, 2121, -2043, -2055, -1290, -2562, -918, -2385,
        2361, 309, -1578, -957, -369, 708, -1374, -507, -1869, -1803, 1401, -237, 2265, 948, -18,
        1620, -363, -873, 681, 1827, 2214, 1983, -1023, -63, 2559, -2301, 1389, -570, -270, -873,
        1287, -342, -966, 162, 2163, 1200, 1572, -819, -2121, 2583, 2184, 2286, -2196, -1752, 903,
        -2025, -1110, 48, 2010, 1269, -870, -1824, 1269, 276, 2316, -1092, -2070, -162, -624,
        -1374, 2523, -12, 1095, 1842, -276, -852, 2058, -2352, 1560, -1668, -867, -2070, 2457,
        1902, 1290, -1179, 1983, 1821, -486, -375, 2328, 2244, -1704, -2235, -1053, -1848, 1170,
        1386, 2472, 2451, 1626, 621, 363, 135, -2109, 1218, -2226, -93, -48, -1227, -600, 1332,
        1260, 2340, 84, -1701, -564, 1695, -729, -2418, -633, -432, 1263, -795, 1431, 321, 1554,
        -1902, 147, 90, -1749, -1767, -1545, -1680, -2220, -1365, -1344, -696, 327, 915, -1308,
        1812, 252, 1179, -165, -138, 2217, -762, -1257, 1488, 1458, 2499, -948, -165, 870, -1821,
        450, -2325, -2202, -1614, 2313, -2433, 60, 312, 1461, 2334, 2421, 1170, 876, 2529, 534,
        1350, 1389, -2004, -2154, -204, 597, -765, -135, 1152, 2379, -402, 1587, -561, 144, 2247,
        2067, 2124, 1722, 2130, -1746, -1470, 2520, 1482, -1743, 2448, 627, 2472, -1665, 2538,
        1134, 1977, -1737, 747, -2385, 1254, 471, -1758, 657, -2004, -1815, -1458, 195, -1776, 414,
        -201, -1116, -36, -996, 2424, 426, 2010, -186, -2091, 1020, -1311, -153, 2553, -1620, -129,
        -840, 1524, 1797, 1515, -843, 117, 1938, -2442, 81, 1575, -2574, 981, 1536, 1437, -1830,
        1944, -510, 2226, 1116, 1431, -546, -1383, 570, -1866, -1776, 183, -1539, -1320, -267,
        -309, 975, -1251, 1002, -2406, 2067, 1491, -1572, 1602, -1830, 852, -636, -2094, 858, 309,
        942, 1749, 1455, 576, -1950, 1404, -867, -2157, -1854, -2412, 2091, -2091, 2397, -2172,
        -333, -1119, -1665, 1158, -1995, 2262, -537, 1797, 2376, -1704, 1539, 2130, -156, -2292,
        -1038, -2331, -1977, -483, 837, -2520, -1980, 792, -1104, 2190, -1161, 1527, -2055, 60,
        -2505, 87, -537, -2247, -2508, -2298, 675, -990, -255, -1104, -1269, -1104, 2343, 1122,
        -852, 2022, 2244, 2304, 2364, 1845, -756, 2373, 2532, 717, -2388, 549, -1731, -2409, 2049,
        -2520, -246, 369, -267, 372, -1578, 2130, 888, 900, -420, 2502, -2193, -288, -66, -1275,
        -870, 2553, 807, 1473, 1932, -720, 396, -2127, -1095, 1077, 1719, -333, 1068, 1734, -1464,
        2424, -873, -1311, -612, 1986, -2475, -1767, 1650, -1275, -732, 651, 735, -141, 651, -501,
        1155, 1587, 831, -570, 2334, -2007, -1086, 975, 909, 2028, -2064, 2262, -2064, -648, -396,
        1869, 0, -747, -2484, -2574, 906, -222, -180, -132, 588, -963, 2541, 2244, 2454, 1275,
        -1269, -1515, 2430, -426, 1965, 1344, -774, -1479, 2487, -537, 2202, -2430, -1092, 2367,
        975, -2442, -177, -1620, -2007, 738, 1698, 504, 1149, 252, 921, -1656, 2457, -399, -186,
        -675, 1647, 312, -1701, 1923, 171, -162, 1890, -2220, -531, 891, 2034, 936, 141, 861,
        -1389, -2412, -2346, -27, -2430, -2268, 1158, 2238, 1704, 570, 1770, 972, -2385, 186,
        -1749, -1113, 1707, -249, -1635, -2133, -684, 2535, -813, 1095, -1803, -1272, -558, -2229,
        2289, 1797, 1398, -744, 1110, 2244, -2502, -1086, 27, -585, -2283, -465, -1584, -2484,
        -1548, 651, 294, -1701, -1665, -690, -1062, 1173, 87, 858, 888, 123, -606, 2223, 2028,
        1968, 648, 2178, 2508, -144, 1899, 1494, 1671, -600, 1815, 990, 81, 2004, -2193, 2475,
        -765, 1836, 672, 2250, 2103, -2157, 90, -2151, 1248, -600, -1209, -555, 858, 1956, -2508,
        -915, 2331, 765, 1302, -786, -1260, 882, 2322, 1029, 2511, 1410, 1473, -1407, -1425, 1791,
        555, 1557, 1281, 1410, -1818, -390, -324, 1482, 1806, -864, -717, 2355, 1890, -2028, -1776,
        759, 2331, 1455, 1068, -1458, -591, 771, 987, 2256, -1260, -1431, 168, -669, -270, -1674,
        -57, 2082, -945, -933, 1161, -294, 516, 2544, -810, -2070, -840, 2235, -1605, -237, -2508,
        2154, 489, 2241, -1317, -411, 2580, 1110, -1842, 1902, 309, 1380, -1392, 1734, -63, 93,
        -1071, 1893, 2229, 2556, 1476, 843, 2424, 2115, 192, 1686, 1410, 402, 957, 2388, 1911,
        -1869, 591, 1545, -234, -876, 81, -1824, 597, -2145, -1632, 1728, 627, 2181, -1650, -1806,
        2151, 489, -99, -246, 2451, -1941, 1758, -621, 2280, -2040, 1350, -1227, -762, -1077, 645,
        1605, 405, 699, 2451, -1464, -894, -2442, -1437, -267, 2253, 1470, 2121, 2232, 1851, -1647,
        1155, -147, 1539, -45, -1761, -1929, 1587, -1800, -1245, -759, 1332, -1449, -1548, -1206,
        888, -555, 2223, 483, 2337, -135, 1284, 1974, -2112, 1683, 690, -1074, -1524, -2061, -288,
        -156, -258, -705, 1731, 1548, 2244, 0,
    ]);

    let n_v = get_parameters(Version::NtruPrime857);
    println!("ntru version {:?}", n_v.irr.len());
    let cipher = encrypt(&m, &pk, &n_v);
    for i in 0..cipher.len() {
        if cipher[i] != c[i] {
            panic!("NTRUps857 failed");
        }
    }
    let message = decrypt(&cipher, &sk, &n_v).unwrap();
    for i in 0..m.len() {
        if message[i] != m[i] {
            panic!("NTRUps857 failed");
        }
    }
}
