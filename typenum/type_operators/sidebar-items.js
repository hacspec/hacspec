window.SIDEBAR_ITEMS = {"trait":[["Abs","A type operator that returns the absolute value."],["Cmp","A type operator for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types."],["Gcd","A type operator that computes the greatest common divisor of `Self` and `Rhs`."],["IsEqual","A type operator that returns `True` if `Self == Rhs`, otherwise returns `False`."],["IsGreater","A type operator that returns `True` if `Self > Rhs`, otherwise returns `False`."],["IsGreaterOrEqual","A type operator that returns `True` if `Self >= Rhs`, otherwise returns `False`."],["IsLess","A type operator that returns `True` if `Self < Rhs`, otherwise returns `False`."],["IsLessOrEqual","A type operator that returns `True` if `Self <= Rhs`, otherwise returns `False`."],["IsNotEqual","A type operator that returns `True` if `Self != Rhs`, otherwise returns `False`."],["Len","A type operator that gives the length of an `Array` or the number of bits in a `UInt`."],["Logarithm2","A type operator for taking the integer binary logarithm of `Self`."],["Max","A type operator that returns the maximum of `Self` and `Rhs`."],["Min","A type operator that returns the minimum of `Self` and `Rhs`."],["PartialDiv","Division as a partial function. This type operator performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder)."],["Pow","A type operator that provides exponentiation by repeated squaring."],["Same","A type operator that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators."],["SquareRoot","A type operator for taking the integer square root of `Self`."],["ToInt","A type operator for taking a concrete integer value from a type."]]};