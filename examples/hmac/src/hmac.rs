use hacspec_lib::*;
use hacspec_sha256::*;

// HASH_SIZE and K_SIZE are defined in the sha256 crate.
const BLOCK_LEN: usize = K_SIZE;
bytes!(PRK, HASH_SIZE);
bytes!(Block, BLOCK_LEN);

const I_PAD: Block = Block(secret_bytes!([
    0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8,
    0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8,
    0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8,
    0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8,
    0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8, 0x36u8,
    0x36u8, 0x36u8, 0x36u8, 0x36u8
]));
const O_PAD: Block = Block(secret_bytes!([
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8,
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8,
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8,
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8,
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8,
    0x5cu8, 0x5cu8, 0x5cu8, 0x5cu8
]));

fn k_block(k: &ByteSeq) -> Block {
    if k.len() > BLOCK_LEN {
        Block::new().update_start(&hash(k))
    } else {
        Block::new().update_start(k)
    }
}

// H(K XOR opad, H(K XOR ipad, text))
pub fn hmac(k: &ByteSeq, txt: &ByteSeq) -> PRK {
    // Applications that use keys longer than B bytes will first hash the key
    // using H and then use the resultant L byte string as the actual key to HMAC
    let k_block = k_block(k);

    let mut h_in = ByteSeq::from_seq(&(k_block ^ I_PAD));
    h_in = h_in.concat(txt);
    let h_inner = hash(&h_in);

    let mut h_in = ByteSeq::from_seq(&(k_block ^ O_PAD));
    h_in = h_in.concat(&h_inner);

    PRK::from_seq(&hash(&h_in))
}
