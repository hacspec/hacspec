use hacspec_lib::prelude::*;

use hacspec_aes::*;
use hacspec_aes_ccm::*;

// These tests have been taken from pages 23-24 of https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38c.pdf
// alen, nlen, plen, tlen are the length of the sequences and not the bit lengths

#[test]
fn kat_aes_ccm_1() {
    let ad = ByteSeq::from_public_slice(&[0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07]);
    let ad2 = ByteSeq::from_public_slice(&[0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07]);
    let n = ByteSeq::from_public_slice(&[0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16]);
    let n2 = ByteSeq::from_public_slice(&[0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16]);
    let pay = ByteSeq::from_public_slice(&[0x20, 0x21, 0x22, 0x23]);
    let pay2 = ByteSeq::from_public_slice(&[0x20, 0x21, 0x22, 0x23]);

    let alen = 8; let nlen = 7; let plen = 4; let tlen = 4;
    let key = Key128::from_public_slice(&[
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
    ]);

    let expected_ct = ByteSeq::from_public_slice(&[
        0x71, 0x62, 0x01, 0x5b, 0x4d, 0xac, 0x25, 0x5d
    ]);

    let out_ct = encrypt_ccm(ad, n, pay, key, tlen, alen, nlen, plen);
    assert_eq!(expected_ct, out_ct);
    assert_eq!(pay2, decrypt_ccm(ad2, n2, out_ct, 8, key, tlen, nlen));
}

#[test]
fn kat_aes_ccm_2() {
    let n = ByteSeq::from_public_slice(&[0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]);
    let ad = ByteSeq::from_public_slice(&[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    ]);
    let pay = ByteSeq::from_public_slice(&[
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
    ]);

    let n2 = ByteSeq::from_public_slice(&[0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]);
    let ad2 = ByteSeq::from_public_slice(&[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    ]);
    let pay2 = ByteSeq::from_public_slice(&[
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
    ]);

    let alen = 16; let nlen = 8; let plen = 16; let tlen = 6;
    let key = Key128::from_public_slice(&[
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
    ]);

    let expected_ct = ByteSeq::from_public_slice(&[
        0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62,
        0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
        0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd
    ]);

    let out_ct = encrypt_ccm(ad, n, pay, key, tlen, alen, nlen, plen);
    assert_eq!(expected_ct, out_ct);
    assert_eq!(pay2, decrypt_ccm(ad2, n2, out_ct, 22, key, tlen, nlen));
}

#[test]
fn kat_aes_ccm_3() {
    let ad = ByteSeq::from_public_slice(&[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13
    ]);
    let n = ByteSeq::from_public_slice(&[
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b
    ]);
    let pay = ByteSeq::from_public_slice(&[
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
    ]);

    let ad2 = ByteSeq::from_public_slice(&[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13
    ]);
    let n2 = ByteSeq::from_public_slice(&[
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b
    ]);
    let pay2 = ByteSeq::from_public_slice(&[
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
    ]);

    let alen = 20; let nlen = 12; let plen = 24; let tlen = 8;
    let key = Key128::from_public_slice(&[
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
    ]);

    let expected_ct = ByteSeq::from_public_slice(&[
        0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a,
        0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
        0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
        0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51
    ]);

    let out_ct = encrypt_ccm(ad, n, pay, key, tlen, alen, nlen, plen);
    assert_eq!(expected_ct, out_ct);
    assert_eq!(pay2, decrypt_ccm(ad2, n2, out_ct, 32, key, tlen, nlen));
}
