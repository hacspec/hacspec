use hacspec_lib::prelude::*;

use hacspec_poly1305::*;

#[test]
fn basic_test() {
    // RFC 7539 Test Vectors
    let msg = ByteSeq::from_public_slice(&[
        0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x46,
        0x6f, 0x72, 0x75, 0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x47,
        0x72, 0x6f, 0x75, 0x70,
    ]);
    let k = PolyKey::from_public_slice(&[
        0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33, 0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06,
        0xa8, 0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd, 0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49,
        0xf5, 0x1b,
    ]);
    let expected = Poly1305Tag::from_public_slice(&[
        0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6, 0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27,
        0xa9,
    ]);
    let computed = poly1305(&msg, k);
    assert!(Poly1305Tag::declassify_eq(&expected, &computed))
}

#[test]
fn corner_case_test() {
    let msg = ByteSeq::from_public_slice(&[
        0, 0, 0, 0, 0, 0, 0, 0, 22, 3, 3, 0, 16, 0, 0, 0, 231, 158, 214, 194, 136, 21, 80, 132,
        115, 98, 192, 197, 90, 173, 113, 64, 13, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
    ]);
    let k = PolyKey::from_public_slice(&[
        0x07, 0xdb, 0xd6, 0xfd, 0x01, 0x03, 0x2c, 0x53, 0x64, 0x4b, 0x9f, 0x94, 0x76, 0x23, 0xbd,
        0x2d, 0x25, 0xec, 0x44, 0xc2, 0x08, 0xe1, 0x32, 0x23, 0xca, 0x8c, 0x5b, 0x89, 0x11, 0xbf,
        0x59, 0xe8,
    ]);
    let expected = Poly1305Tag::from_public_slice(&[
        1, 66, 72, 238, 152, 119, 158, 102, 3, 127, 38, 148, 173, 28, 215, 205,
    ]);
    let computed = poly1305(&msg, k);
    assert!(Poly1305Tag::declassify_eq(&expected, &computed))
}
