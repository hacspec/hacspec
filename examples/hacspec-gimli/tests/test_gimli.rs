use hacspec_lib::prelude::*;
use hacspec_gimli::*;

#[test]
fn kat_gimli() {
    let state = State::from_public_slice(&[1u32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
    let expected = State::from_public_slice(&[
        0x2be627ff, 0x7458fba0, 0xee1215e3, 0xcedd078, 0xd040ca63, 0xdc423706, 0x95e37aaf,
        0xcaf8c20, 0x47a98cd5, 0xa0024ee2, 0x946e3cb0, 0xc90bbffd,
    ]);
    let out = gimli(state);
    assert_eq!(
        expected
            .iter()
            .map(|x| U32::declassify(*x))
            .collect::<Vec<_>>(),
        out.iter().map(|x| U32::declassify(*x)).collect::<Vec<_>>()
    );
}

#[test]
fn kat_gimli_hash() {
    let input = ByteSeq::from_public_slice(&[1, 2, 3, 4, 5, 6]);
    let expected = Digest::from_public_slice(&[
        0x4b, 0xb0, 0xf3, 0x12, 0x6a, 0x57, 0x10, 0x5, 0x6, 0x9c, 0x52, 0x9a, 0xfb, 0x86, 0x9f,
        0x12, 0x5d, 0xae, 0x60, 0x65, 0x71, 0x6, 0xe1, 0x4d, 0x22, 0x27, 0xc9, 0xb3, 0xec, 0x78,
        0x7b, 0xd3,
    ]);
    let out = gimli_hash(&input);
    assert_eq!(
        expected
            .iter()
            .map(|x| U8::declassify(*x))
            .collect::<Vec<_>>(),
        out.iter().map(|x| U8::declassify(*x)).collect::<Vec<_>>()
    );

    let input = ByteSeq::from_public_slice(&[
        0x46, 0xad, 0xcf, 0xac, 0x5a, 0x4f, 0xc2, 0x52, 0xc1, 0x50, 0xf6, 0x9c, 0x7d, 0x5c, 0x19,
        0x21, 0xba, 0xac, 0x32, 0x79, 0x2e, 0x90, 0xfe, 0x4e, 0x3b, 0x5b, 0x38, 0xec, 0xbd, 0x3d,
        0x71, 0x75, 0x36, 0x19, 0x5, 0xe, 0x54, 0x94, 0xf4, 0xf5, 0x70, 0x9, 0x45, 0xa, 0x25, 0x3f,
        0x2a, 0xe1, 0x70, 0x8, 0xd0, 0xb5, 0x17, 0xb2, 0x77, 0xba, 0x22, 0xb8, 0x83, 0x63, 0xdb,
        0xee, 0xec, 0x47, 0x49, 0x9b, 0xba, 0x6b, 0x54, 0xf9, 0x24, 0xc5, 0xb1, 0xf3, 0xf2, 0xd2,
        0x73, 0x96, 0x10, 0xf2, 0xd1, 0xa4, 0xf6, 0xef, 0x82, 0x9c, 0xbc, 0x3e, 0x8, 0xe5, 0x6,
        0xf1, 0x4a, 0xaa, 0x60, 0xe5, 0x3e, 0x6a, 0x29, 0x90,
    ]);
    let expected = Digest::from_public_slice(&[
        0x66, 0xae, 0xd3, 0xd, 0x9c, 0xd0, 0x37, 0x67, 0x30, 0x89, 0x34, 0xe6, 0xb2, 0xb9, 0xb5,
        0xb, 0xb, 0x7c, 0x64, 0x9, 0xca, 0x91, 0x76, 0xb3, 0x2d, 0xfb, 0xc3, 0x82, 0x8d, 0x17,
        0xeb, 0x57,
    ]);
    let out = gimli_hash(&input);
    assert_eq!(
        expected
            .iter()
            .map(|x| U8::declassify(*x))
            .collect::<Vec<_>>(),
        out.iter().map(|x| U8::declassify(*x)).collect::<Vec<_>>()
    );
}
